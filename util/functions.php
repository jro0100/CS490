<?php

/**
 * Establishes a PDO connection to a MYSQL database using the credentials stored in environment variables
 * @return PDO|null
 */
function get_db() {
    global $db;
    if (!isset($db)) {
        try {
            $dbhost = getenv("DB_HOSTNAME");
            $dbname = getenv("DB_NAME");
            $dbuname = getenv("DB_USERNAME");
            $dbpass = getenv("DB_PASSWORD");

            $con = "mysql:dbname=$dbname;host=$dbhost";
            $db = new PDO($con, $dbuname, $dbpass);
        } catch (Exception $e) {
            var_export($e);
            $db = null;
        }
    }
    return $db;
}

/**
 * Executes a given SQL statement with given parameters and returns the result if any, or void if none
 * @param $stmtstring string SQL query string to be sent to the database to be executed
 * @param $params array Associative array where the keys are the variables in the SQL statement string and the values are the values to be inserted into those variables
 * @param &$lastID string Optional - variable passed by reference. If exists, it is populated with the ID generated by the most recent Insert statement
 * @return mixed|void
 */
function db_execute($stmtstring, $params, &$lastID = null) {
    $db = get_db();
    $stmt = $db->prepare($stmtstring);
    $stmt->execute($params);
    $e = $stmt->errorInfo();
    if ($e[0] != "00000") {
        var_export($e);
        exit("Database failure try again");
    }
    if ($lastID) {
        $lastID = $db->lastInsertId();
    }
    $result = $stmt->fetchall(PDO::FETCH_ASSOC);
    $stmt->closeCursor();
    return $result;
}

/**
 * Executes a given SQL statement multiple times with different given parameters
 * @param $stmtstring string SQL query string to be sent to the database to be executed
 * @param $params array 2D array, where each subarray contains the parameters for one execution of the SQL query
 * @return array|void
 */
function db_execute_query_multiple_times($stmtstring, $params) {
    $db = get_db();
    $stmt = $db->prepare($stmtstring);
    $result = array();
    foreach ($params as $param) {
        $stmt->execute($param);
        $e = $stmt->errorInfo();
        if ($e[0] != "00000") {
            var_export($e);
            exit("Database failure try again");
        }
        array_push($result, $stmt->fetch(PDO::FETCH_ASSOC));
    }
    $stmt->closeCursor();
    return $result;
}


/**
 * Generates an array with a student's answers to each question and outputs for all test cases
 * @param $studentAnswers array Output array where all student output information is put in
 * @param $studentID int Student ID number from database
 * @param $examID int Exam ID number from database
 */
function generate_student_outputs(&$studentAnswers, $studentID, $examID) {
    $sqlstmt = "SELECT questiongrade.*, questionbank.question, questionbank.functionToCall, questionbank.questionConstraint FROM questiongrade LEFT JOIN questionbank ON questiongrade.questionID = questionbank.questionID WHERE studentID = :studentID AND examID = :examID";
    $params = array(":studentID" => $studentID,
        ":examID" => $examID);
    $studentAnswers = db_execute($sqlstmt, $params);

    $sqlstmt = "SELECT studenttestcases.*, testcases.answer FROM studenttestcases LEFT JOIN testcases ON studenttestcases.testCaseID = testcases.testCaseID WHERE studentID = :studentID AND examID = :examID AND questionID = :questionID";
    for ($i = 0; $i < count($studentAnswers); $i++) {

        $studentAnswers[$i]["question"] = str_replace("\r\n", "<br>", $studentAnswers[$i]["question"]);
        $questionID = $studentAnswers[$i]["questionID"];
        $params = array(
            ":studentID" => $studentID,
            ":examID" => $examID,
            ":questionID" => $questionID
        );
        $autogradeOutputs = db_execute($sqlstmt, $params);


        // Retrieve information about each test case and generate the correct output string for each
        for ($j = 0; $j < count($autogradeOutputs); $j++) {
            $answerForTestCase = $autogradeOutputs[$j]["answer"];
            if ($j == 0) {
                $correctString = "Defined function as: " . $answerForTestCase;
            } elseif ($answerForTestCase == "matchConstraint: true") {
                $questionConstraint = $studentAnswers[$i]["questionConstraint"];
                $correctString = match ($questionConstraint) {
                    "forLoop" => "Used a for loop",
                    "whileLoop" => "Used a while loop",
                    "recursion" => "Used recursion",
                };
            } else {
                $selectTestCaseParametersStmt = "SELECT * FROM parameters WHERE testCaseID = :testCaseID";
                $selectTestCaseParametersParams = array(
                    ":testCaseID" => $autogradeOutputs[$j]["testCaseID"]
                );
                $testcaseParameters = db_execute($selectTestCaseParametersStmt, $selectTestCaseParametersParams);
                $testCaseParamArray = array();
                foreach ($testcaseParameters as $p) {
                    array_push($testCaseParamArray, $p["parameter"]);
                }
                $paramString = join(", ", $testCaseParamArray);
                $correctString = $studentAnswers[$i]["functionToCall"] . "($paramString) -> $answerForTestCase";
            }
            $autogradeOutputs[$j]["correctOutput"] = $correctString;
        }
        $studentAnswers[$i]["autogradeOutputs"] = $autogradeOutputs;
    }
}
